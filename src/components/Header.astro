---
import HeaderButton from "./HeaderButton.astro";
import Popover from "./Popover.astro";
import Connect from "./Connect.tsx";

import meloLogo from "../assets/melo_inline.svg";

import type MenuItem from "../types/MenuItem";

interface Props {
  menu: MenuItem[];
}

const { menu = [] } = Astro.props;
---

<header class="bg-neutral-800">
  <nav
    class="mx-auto flex max-w-screen-xl items-center justify-between px-4 py-2.5 lg:px-6"
  >
    <div class="flex min-w-[110px]">
      <div class="pr-2 md:hidden" data-menu="#menu">
        <HeaderButton icon="mdi:menu" />
      </div>
      <a href="https://melo.re">
        <img src={meloLogo.src} class="mr-3 h-9" alt="Melo Logo" />
      </a>
    </div>
    <div
      id="menu"
      class="fixed top-0 left-0 z-40 h-screen w-64 -translate-x-full bg-neutral-800 transition-transform md:relative md:flex md:h-auto md:w-auto md:translate-x-0 md:transition-none"
    >
      <div class="flex items-center px-4 py-2 md:hidden">
        <h2 class="flex-1 text-2xl text-white">Menu</h2>
        <HeaderButton icon="mdi:close" data-menu="#menu" />
      </div>
      <ul
        id="menu"
        class="flex flex-col font-bold text-neutral-300 md:flex-row"
      >
        {
          menu.map((item) => (
            <li class="flex hover:text-orange-400 focus:text-orange-400">
              <a href={item.link} class="px-4 py-2">
                {item.name}
              </a>
            </li>
          ))
        }
      </ul>
    </div>
    <div class="flex pr-1">
      <HeaderButton
        icon="mdi:white-balance-sunny"
        data-theme-toggle
        data-theme-light
        className="hidden"
      />
      <HeaderButton
        icon="mdi:moon-and-stars"
        data-theme-toggle
        data-theme-dark
        className="hidden"
      />
      <HeaderButton
        icon="mdi:sun-moon-stars"
        data-theme-toggle
        data-theme-auto
      />
      <Popover>
        <HeaderButton slot="trigger" icon="mdi:monitor-speaker" />
        <div
          class="flex max-h-[300px] w-[300px] flex-col overflow-hidden rounded-lg border border-neutral-700 bg-white dark:bg-neutral-900"
          slot="content"
        >
          <Connect client:visible />
        </div>
      </Popover>
    </div>
  </nav>
</header>

<div
  id="backdrop"
  class="duration fixed inset-0 z-39 hidden bg-neutral-900/80 transition md:hidden"
  data-menu="#menu"
>
</div>

<script>
  const backdrop = document.querySelector("#backdrop");
  const buttons = document.querySelectorAll("[data-menu]");

  buttons.forEach((button) => {
    const menu = document.querySelector((button as any).dataset.menu);
    if (menu) {
      button.addEventListener("click", () => {
        menu?.classList.toggle("translate-x-0");
        backdrop?.classList.toggle("hidden");
      });
    }
  });
</script>

<script>
  const buttons = document.querySelectorAll("[data-theme-toggle]");

  function getTheme() {
    return localStorage.getItem("theme") || "auto";
  }

  function toggleTheme() {
    const theme = localStorage.getItem("theme");
    if (theme === "light") {
      localStorage.setItem("theme", "dark");
      document.documentElement.classList.add("dark");
    } else if (theme === "dark") {
      localStorage.removeItem("theme");
      document.documentElement.classList.toggle(
        "dark",
        window.matchMedia("(prefers-color-scheme: dark)").matches,
      );
    } else {
      localStorage.setItem("theme", "light");
      document.documentElement.classList.remove("dark");
    }
    buttons.forEach((button) =>
      button.classList.toggle(
        "hidden",
        !button.hasAttribute("data-theme-" + getTheme()),
      ),
    );
  }

  buttons.forEach((button) => {
    button.addEventListener("click", toggleTheme);
    button.classList.toggle(
      "hidden",
      !button.hasAttribute("data-theme-" + getTheme()),
    );
  });
</script>
